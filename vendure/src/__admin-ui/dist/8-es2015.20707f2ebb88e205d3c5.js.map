{"version":3,"sources":["webpack:///src/extensions/566e501352b523d8184fffd43008c2a0df00729e578d261fe8bf8b3879e93a7d/queries.ts","webpack:///src/extensions/566e501352b523d8184fffd43008c2a0df00729e578d261fe8bf8b3879e93a7d/webhook.component.ts","webpack:///src/extensions/566e501352b523d8184fffd43008c2a0df00729e578d261fe8bf8b3879e93a7d/webhook.component.html","webpack:///src/extensions/566e501352b523d8184fffd43008c2a0df00729e578d261fe8bf8b3879e93a7d/webhook.module.ts"],"names":["updateWebhookMutation","getWebhookQuery","route","router","serverConfigService","formBuilder","dataService","changeDetector","notificationService","this","webhookForm","group","url","required","query","mapStream","d","webhook","subscribe","controls","setValue","console","log","value","dirty","formValue","mutate","toPromise","markAsPristine","markForCheck","success","entity","e","error","save","WebhookModule","id","label","routerLink","icon","forChild","path","pathMatch","component","data","breadcrumb"],"mappings":"yNAEO,MAAMA,EAAwB,GAAG;;;;EAM3BC,EAAkB,GAAG;;;;kBCG3B,MAAM,EAGT,YACIC,EACAC,EACAC,EACQC,EACEC,EACFC,EACAC,GAHA,KAAAH,cACE,KAAAC,cACF,KAAAC,iBACA,KAAAC,sBAERC,KAAKC,YAAcD,KAAKJ,YAAYM,MAAM,CACtCC,IAAK,CAAC,sBAAuB,IAAWC,YAI1C,W,yDACIJ,KAAKH,YAAYQ,MAAMb,GACxBc,UAAWC,GAAWA,EAAEC,SACxBC,UAAUD,GAAWR,KAAKC,YAAYS,SAAc,IAAEC,SAASH,OAGlE,O,mDACFI,QAAQC,IAAI,UAAWb,KAAKC,YAAYa,MAAMX,KAC9C,IACI,GAAIH,KAAKC,YAAYc,MAAO,CACxB,MAAMC,EAAYhB,KAAKC,YAAYa,YAC7Bd,KAAKH,YAAYoB,OAAO1B,EAAuB,CAACY,IAAKa,EAAUb,MAAMe,YAE/ElB,KAAKC,YAAYkB,iBACjBnB,KAAKF,eAAesB,eACpBpB,KAAKD,oBAAoBsB,QAAQ,+BAAgC,CAC7DC,OAAQ,YAEd,MAAOC,GACLvB,KAAKD,oBAAoByB,MAAM,6BAA8B,CACzDF,OAAQ,iB,sCArCX,GAAgB,0E,uBAAhB,EAAgB,uRCX7B,gBACI,gBACI,iBACI,oBACI,2BACI,kBAKJ,OACA,mBAEQ,gCAAS,EAAAG,UAGb,iBACJ,OACJ,OACJ,OACJ,OACJ,Q,MAnB2B,wCAYH,yE,iECWjB,MAAMC,G,uBAAAA,I,oDAAAA,IAAa,UAVX,CACP,aAAe,CACXC,GAAI,UACJC,MAAO,UACPC,WAAY,CAAC,uBACbC,KAAM,oBACP,aACN,SAhBQ,CACL,KACA,IAAaC,SAAS,CAAC,CACnBC,KAAM,GACNC,UAAW,OACXC,UAAW,EACXC,KAAM,CAACC,WAAY","file":"x","sourcesContent":["import gql from 'graphql-tag';\n\nexport const updateWebhookMutation = gql`\n    mutation updateWebhook($url: String!) {\n        updateWebhook(url: $url)\n    }\n`;\n\nexport const getWebhookQuery = gql`\n    query webhook {\n        webhook\n    }\n`;","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {DataService, NotificationService, ServerConfigService} from '@vendure/admin-ui/core';\nimport {getWebhookQuery, updateWebhookMutation} from './queries';\n\n\n@Component({\n    selector: 'greeter',\n    templateUrl: './webhook.component.html',\n})\nexport class WebhookComponent implements OnInit {\n    webhookForm: FormGroup;\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private formBuilder: FormBuilder,\n        protected dataService: DataService,\n        private changeDetector: ChangeDetectorRef,\n        private notificationService: NotificationService,\n    ) {\n        this.webhookForm = this.formBuilder.group({\n            url: ['https://example.com', Validators.required],\n        });\n    }\n\n    async ngOnInit(): Promise<void> {\n        await this.dataService.query(getWebhookQuery)\n            .mapStream((d: any) => d.webhook)\n            .subscribe(webhook => this.webhookForm.controls['url'].setValue(webhook));\n    }\n\n    async save(): Promise<void> {\n        console.log('SAVEDDD', this.webhookForm.value.url);\n        try {\n            if (this.webhookForm.dirty) {\n                const formValue = this.webhookForm.value;\n                await this.dataService.mutate(updateWebhookMutation, {url: formValue.url}).toPromise();\n            }\n            this.webhookForm.markAsPristine();\n            this.changeDetector.markForCheck();\n            this.notificationService.success('common.notify-update-success', {\n                entity: 'Webhook',\n            });\n        } catch (e) {\n            this.notificationService.error('common.notify-update-error', {\n                entity: 'Webhook',\n            });\n        }\n    }\n\n\n}","<div class=\"clr-row\">\n    <div class=\"clr-col\">\n        <form class=\"form\" [formGroup]=\"webhookForm\">\n            <section class=\"form-block\">\n                <vdr-form-field label=\"Webhook url\" for=\"url\">\n                    <input\n                            id=\"url\"\n                            type=\"text\"\n                            formControlName=\"url\"\n                    />\n                </vdr-form-field>\n                <button\n                        class=\"btn btn-primary\"\n                        (click)=\"save()\"\n                        [disabled]=\"webhookForm.invalid || webhookForm.pristine\"\n                >\n                    Save\n                </button>\n            </section>\n        </form>\n    </div>\n</div>","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {addNavMenuItem, addNavMenuSection, SharedModule} from '@vendure/admin-ui/core';\nimport {WebhookComponent} from './webhook.component';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        RouterModule.forChild([{\n            path: '',\n            pathMatch: 'full',\n            component: WebhookComponent,\n            data: {breadcrumb: 'Webhook'},\n        }]),\n    ],\n    providers: [\n        addNavMenuItem({\n            id: 'webhook',\n            label: 'Webhook',\n            routerLink: ['/extensions/webhook'],\n            icon: 'cursor-hand-open',\n        }, 'settings'),\n    ],\n    declarations: [WebhookComponent],\n})\nexport class WebhookModule {\n}"]}